#!/bin/sh
#
# Description: Customizes NetworkManager by creating system connection
# entries. Uses thinstation.conf variables to control creation of
# system-connections (variables are documented in networkmanager/build/conf).
#
# Current limitations: Ethernet-specific.

append_ipv4_connection_config() {
	# appends IPV4 configuration to connection definition file
	# $SCFILE (which must be set by caller)
	#
	echo "Appending IPV4 connection configuration..."

	## translate IPv4-related TS_GLOBALs into SCFILE modifications
	[ -n "$NET_IPV4_DNS1" ] && IPV4_DNS_OPT="dns=$NET_IPV4_DNS1;$NET_IPV4_DNS2"
	[ -n "$NET_IPV4_DNS" ] && IPV4_DNS_OPT="dns=$NET_IPV4_DNS;"
	[ -n "$NET_IPV4_DNS_SEARCH" ] && IPV4_DNS_SEARCH_OPT="dns-search=$NET_IPV4_DNS_SEARCH;"

	# always write the category and method, adding DNS if any specified
	echo "[ipv4]" >> $SCFILE

	echo "method=$NET_IPV4_MODE" >> $SCFILE

	[ -n "$IPV4_DNS_OPT" ] && echo "$IPV4_DNS_OPT" >> $SCFILE
	[ -n "$IPV4_DNS_SEARCH_OPT" ] && echo "$IPV4_DNS_SEARCH_OPT" >> $SCFILE

	# add address info if method is "manual"
	if [ "$NET_IPV4_MODE" == "manual" ]; then
		GW=",$NET_IPV4_GATEWAY"
		IPTMP="$NET_IPV4_ADDRESS"
		IPV4_ADDRESSES="address1=$IPTMP$GW"
		echo $IPV4_ADDRESSES >> $SCFILE

		x=2
		while [ -n "`eval echo '$NET_IPV4_ADDRESS'$x`" ]; do
			GW=",`eval echo '$NET_IPV4_GATEWAY'$x`"
			IPTMP=`eval echo '$NET_IPV4_ADDRESS'$x`
			IPV4_ADDRESSES="address$x=$IPTMP$GW"
			echo $IPV4_ADDRESSES >> $SCFILE
			let x=x+1
		done
	fi

	x=1;
	while [ -n "`eval echo '$NET_IPV4_ROUTE'$x'_IP'`" ]; do
		GW="`eval echo '$NET_IPV4_ROUTE'$x'_GW'`"
		METRIC=`eval echo '$NET_IPV4_ROUTE'$x'_METRIC'`
		IPTMP=`eval echo '$NET_IPV4_ROUTE'$x'_IP'`
		if [ -z "$METRIC" ]; then METRIC=0; fi
		IPV4_ROUTE="route$x=$IPTMP,$GW,$METRIC"
		echo $IPV4_ROUTE >> $SCFILE
		let x+=1
	done

	echo "Finished appending IPV4 connection configuration."
}


append_ipv6_connection_config() {
	# appends IPV6 configuration to connection definition file
	# $SCFILE (which must be set by caller)
	#
	## translate IPv6-related TS_GLOBALs into SCFILE modifications

	echo "Appending IPV6 connection configuration..."

	[ -n "$NET_IPV6_DNS1" ] && IPV6_DNS_OPT="dns=$NET_IPV6_DNS1;$NET_IPV6_DNS2"
	[ -n "$NET_IPV6_DNS_SEARCH" ] && IPV6_DNS_SEARCH_OPT="dns-search=$NET_IPV6_DNS_SEARCH;"

	# always write the category and method, adding DNS if any specified
	echo "[ipv6]" >> $SCFILE

	if [ "$NET_IPV6_MODE" == "disabled" ]; then
		# "ignore" is used for IPv6, but for consistently we use
		# "disable" in thinstation.conf for both protocols
		NET_IPV6_MODE="ignore"
	fi

	echo "method=$NET_IPV6_MODE" >> $SCFILE

	[ -n "$IPV6_DNS_OPT" ] && echo "$IPV6_DNS_OPT" >> $SCFILE
	[ -n "$IPV6_DNS_SEARCH_OPT" ] && echo "$IPV6_DNS_SEARCH_OPT" >> $SCFILE

	# add address info if method is "manual"
	if [ "$NET_IPV6_MODE" == "manual" ]; then
		GW=",$NET_IPV6_GATEWAY"
		IPTMP="$NET_IPV6_ADDRESS"
		IPV6_ADDRESSES="address1=$IPTMP$GW"
		echo "$IPV6_ADDRESSES" >> $SCFILE
	fi

	echo "Finished appending IPV6 connection configuration."
}


append_ethernet_connection() {
	# appends ethernet configuration to connection definition file
	# $SCFILE (which must be set by caller)
	#
	echo "Appending ethernet connection configuration..."
	conn_name=$1
	SCFILE="$SCDIR/$conn_name.nmconnection"
	
	# Generated UUID based on host/time
	UUID=`uuidgen -t`

	cat <<EOF >> $SCFILE
[connection]
id=$conn_name
uuid=$UUID
type=ethernet
autoconnect=true
timestamp=0
EOF
	echo "Finished appending ethernet connection configuration..."
}


append_ethernet_config() {
	# appends 802.3 ethernet configuration to connection definition file
	# $SCFILE (which must be set by caller)
	#
	echo "Appending connection configuration..."
	echo "[ethernet]" >> $SCFILE
	# if MTU is set, create a non-empty MTU_OPT for inclusion
	[ -n "$NET_MTU" ] && echo "mtu=$NET_MTU" >> $SCFILE
	echo "Finished appending connection configuration."
}


create_ethernet_system_connection() {
	# Creates NetworkManager system-connection file for Ethernet interfaces in
	# $SCFILE (which must be set by caller)
	#
	if [ -n "$NET_MTU" ] || \
	[ "$NET_IPV4_MODE" != "auto" ] || \
	[ "$NET_IPV6_MODE" != "auto" ]; then

		# Only create a system connection file if either MTU is
		# specified or at least one mode is set to "auto". Otherwise
		# we fall back to default NM behavior (i.e. no system connection
		# file)

		echo "Creating ethernet system connection"

		# create system-connection file if at least one method is non-auto
		# (since auto is the default) or if MTU is specified

		echo "#$conn_name connection" > $SCFILE
		append_ethernet_connection "$conn_name"
		append_ethernet_config

		# Append IPv4 configuration to system-connection file
		append_ipv4_connection_config

		# Append IPv6 configuration to system-connection file
		append_ipv6_connection_config

		# set file perms for SCFILE
		chmod 600 $SCFILE
		chown root:root $SCFILE

		echo "Finished creating ethernet system connection"
	else
		echo "Skipping system connection creation - no thinstation.conf customizations present"
	fi
}

# Source TS variables
. `dirname $0`/common

# exit if anything fails......random breakage
#set -e

#set -x
#exec </dev/null >/var/log/networkmanager.log 2>&1

## MAIN
conn_name="Ethernet"

# system-connections directory path
SCDIR="/etc/NetworkManager/system-connections"

# File to create in system-connections dir
SCFILE="$SCDIR/$conn_name.nmconnection"

# Assume that if not specified, an interface will auto-configure
# We do this here to avoid creating a system-configuration file
# if both modes are not specified in thinstation.conf (i.e.
# default NetworkManager behavior)
: ${NET_IPV4_MODE:="auto"}
: ${NET_IPV6_MODE:="auto"}

# Correct a likely data entry mistake
[ "$NET_IPV4_MODE" == "disable" ] && NET_IPV4_MODE="disabled"
[ "$NET_IPV6_MODE" == "disable" ] && NET_IPV6_MODE="disabled"

create_ethernet_system_connection

echo "Finished creating system connections for NetworkManager."

#!/bin/bash
#
# Description: Customizes NetworkManager by creating system connection
# entries. Uses thinstation.conf variables to control creation of
# system-connections (variables are documented in networkmanager/build/conf).
#
# Current limitations: Ethernet-specific.

append_ipv4_connection_config() {
	# appends IPV4 configuration to connection definition file
	# $SCFILE (which must be set by caller)
	#
	echo "Appending IPV4 connection configuration..."

	## translate IPv4-related TS_GLOBALs into SCFILE modifications
	[ -n "$NET_IPV4_DNS1" ] && IPV4_DNS_OPT="dns=$NET_IPV4_DNS1;$NET_IPV4_DNS2"
	[ -n "$NET_IPV4_DNS" ] && IPV4_DNS_OPT="dns=$NET_IPV4_DNS;"
	[ -n "$NET_IPV4_DNS_SEARCH" ] && IPV4_DNS_SEARCH_OPT="dns-search=$NET_IPV4_DNS_SEARCH;"

	# always write the category and method, adding DNS if any specified
	echo "[ipv4]" >> $SCFILE

	echo "method=$NET_IPV4_MODE" >> $SCFILE

	[ -n "$IPV4_DNS_OPT" ] && echo "$IPV4_DNS_OPT" >> $SCFILE
	[ -n "$IPV4_DNS_SEARCH_OPT" ] && echo "$IPV4_DNS_SEARCH_OPT" >> $SCFILE

	# add address info if method is "manual"
	if [ "$NET_IPV4_MODE" == "manual" ]; then
		GW=",$NET_IPV4_GATEWAY"
		IPTMP="$NET_IPV4_ADDRESS"
		IPV4_ADDRESSES="address1=$IPTMP$GW"
		echo $IPV4_ADDRESSES >> $SCFILE

		x=2
		while [ -n "`eval echo '$NET_IPV4_ADDRESS'$x`" ]; do
			GW=",`eval echo '$NET_IPV4_GATEWAY'$x`"
			IPTMP=`eval echo '$NET_IPV4_ADDRESS'$x`
			IPV4_ADDRESSES="address$x=$IPTMP$GW"
			echo $IPV4_ADDRESSES >> $SCFILE
			let x=x+1
		done
	fi

	x=1;
	while [ -n "`eval echo '$NET_IPV4_ROUTE'$x'_IP'`" ]; do
		GW="`eval echo '$NET_IPV4_ROUTE'$x'_GW'`"
		METRIC=`eval echo '$NET_IPV4_ROUTE'$x'_METRIC'`
		IPTMP=`eval echo '$NET_IPV4_ROUTE'$x'_IP'`
		if [ -z "$METRIC" ]; then METRIC=0; fi
		IPV4_ROUTE="route$x=$IPTMP,$GW,$METRIC"
		echo $IPV4_ROUTE >> $SCFILE
		let x+=1
	done

	echo "Finished appending IPV4 connection configuration."
}


append_ipv6_connection_config() {
	# appends IPV6 configuration to connection definition file
	# $SCFILE (which must be set by caller)
	#
	## translate IPv6-related TS_GLOBALs into SCFILE modifications

	echo "Appending IPV6 connection configuration..."

	[ -n "$NET_IPV6_DNS1" ] && IPV6_DNS_OPT="dns=$NET_IPV6_DNS1;$NET_IPV6_DNS2"
	[ -n "$NET_IPV6_DNS_SEARCH" ] && IPV6_DNS_SEARCH_OPT="dns-search=$NET_IPV6_DNS_SEARCH;"

	# always write the category and method, adding DNS if any specified
	echo "[ipv6]" >> $SCFILE

	if [ "$NET_IPV6_MODE" == "disabled" ]; then
		# "ignore" is used for IPv6, but for consistently we use
		# "disable" in thinstation.conf for both protocols
		NET_IPV6_MODE="ignore"
	fi

	echo "method=$NET_IPV6_MODE" >> $SCFILE

	[ -n "$IPV6_DNS_OPT" ] && echo "$IPV6_DNS_OPT" >> $SCFILE
	[ -n "$IPV6_DNS_SEARCH_OPT" ] && echo "$IPV6_DNS_SEARCH_OPT" >> $SCFILE

	# add address info if method is "manual"
	if [ "$NET_IPV6_MODE" == "manual" ]; then
		GW=",$NET_IPV6_GATEWAY"
		IPTMP="$NET_IPV6_ADDRESS"
		IPV6_ADDRESSES="address1=$IPTMP$GW"
		echo "$IPV6_ADDRESSES" >> $SCFILE
	fi

	echo "Finished appending IPV6 connection configuration."
}


append_ethernet_connection() {
	# appends ethernet configuration to connection definition file
	# $SCFILE (which must be set by caller)
	#
	echo "Appending ethernet connection configuration..."
	conn_name=$1
	SCFILE="$SCDIR/$conn_name.nmconnection"
	
	# Generated UUID based on host/time
	UUID=`uuidgen -t`

	cat <<EOF >> $SCFILE
[connection]
id=$conn_name
uuid=$UUID
type=ethernet
autoconnect=true
timestamp=0
EOF
	echo "Finished appending ethernet connection configuration..."
}


append_ethernet_config() {
	# appends 802.3 ethernet configuration to connection definition file
	# $SCFILE (which must be set by caller)
	#
	echo "Appending connection configuration..."
	echo "[ethernet]" >> $SCFILE
	# if MTU is set, create a non-empty MTU_OPT for inclusion
	[ -n "$NET_MTU" ] && echo "mtu=$NET_MTU" >> $SCFILE
	echo "Finished appending connection configuration."
}


create_ethernet_system_connection() {
	conn_name="Ethernet"

	# File to create in system-connections dir
	SCFILE="$SCDIR/$conn_name.nmconnection"

	# Creates NetworkManager system-connection file for Ethernet interfaces in
	# $SCFILE (which must be set by caller)
	#
	if [ -n "$NET_MTU" ] || \
	[ "$NET_IPV4_MODE" != "auto" ] || \
	[ "$NET_IPV6_MODE" != "auto" ]; then

		# Only create a system connection file if either MTU is
		# specified or at least one mode is set to "auto". Otherwise
		# we fall back to default NM behavior (i.e. no system connection
		# file)

		echo "Creating ethernet system connection"

		# create system-connection file if at least one method is non-auto
		# (since auto is the default) or if MTU is specified

		echo "#$conn_name connection" > $SCFILE
		append_ethernet_connection "$conn_name"
		append_ethernet_config

		# Append IPv4 configuration to system-connection file
		append_ipv4_connection_config

		# Append IPv6 configuration to system-connection file
		append_ipv6_connection_config

		# set file perms for SCFILE
		chmod 600 $SCFILE
		chown root:root $SCFILE

		echo "Finished creating ethernet system connection"
	else
		echo "Skipping system connection creation - no thinstation.conf customizations present"
	fi
}

create_wireless_system_connection() {
	if [ -n "$WIRELESS_ESSID" ]; then
	    conn_name="$WIRELESS_ESSID"
	    SCFILE="$SCDIR/$conn_name.nmconnection"
	    append_wireless_connection
	fi
}

append_wireless_connection() {
    echo "Appending wireless connection configuration..."
    : ${WIRELESS_MODE:="infrastructure"}

    # Extract the wireless interface name using iwconfig
    wireless_interface=$(iwconfig 2>&1 | awk '/IEEE 802.11/ {print $1}')
	if [ -z "$wireless_interface" ]; then
		echo "No wireless adapters found."
		return 1
	fi

    # Start building the connection file
    cat <<EOF >> $SCFILE
[connection]
id=$conn_name
uuid=$(uuidgen -t)
type=wifi
interface-name=$wireless_interface
autoconnect=true
permissions=

[wifi]
ssid=$WIRELESS_ESSID
mode=$WIRELESS_MODE
EOF

    # Check if a WPA key is provided
    if [ -n "$WIRELESS_WPAKEY" ]; then
        cat <<EOF >> $SCFILE
security=802-11-wireless-security

[wifi-security]
auth-alg=open
key-mgmt=wpa-psk
psk=$WIRELESS_WPAKEY

EOF
    else
        echo "No WPA key provided, setting up an open network..."
        echo "security=none" >> $SCFILE
    fi

    # Append IPv4 and IPv6 configuration
    append_ipv4_connection_config
    append_ipv6_connection_config

    # Set permissions for the configuration file
    chmod 600 $SCFILE
    chown root:root $SCFILE

    echo "Finished appending wireless connection configuration..."
}


# Source TS variables
. `dirname $0`/common

# exit if anything fails......random breakage
#set -e

#set -x
#exec </dev/null >/var/log/networkmanager.log 2>&1

## MAIN
# system-connections directory path
SCDIR="/etc/NetworkManager/system-connections"

# Assume that if not specified, an interface will auto-configure
# We do this here to avoid creating a system-configuration file
# if both modes are not specified in thinstation.conf (i.e.
# default NetworkManager behavior)
: ${NET_IPV4_MODE:="auto"}
: ${NET_IPV6_MODE:="auto"}
: ${NET_USE:="BOTH"}

# Correct a likely data entry mistake
[ "$NET_IPV4_MODE" == "disable" ] && NET_IPV4_MODE="disabled"
[ "$NET_IPV6_MODE" == "disable" ] && NET_IPV6_MODE="disabled"

if [ "$NET_USE" == "LAN" ] || [ "$NET_USE" == "BOTH" ]; then
	create_ethernet_system_connection
fi

#Wireless
if [ "$NET_USE" == "WLAN" ] || [ "$NET_USE" == "BOTH" ]; then
	create_wireless_system_connection
fi

echo "Finished creating system connections for NetworkManager."

if [ "$HOSTNAME" == "thinstation-linux" ]; then
	FIRST_ETH=$(ls /sys/class/net | grep -m 1 'e')
	if [ -n "$FIRST_ETH" ]; then
		CLIENT_MAC=`cat /sys/class/net/$FIRST_ETH/address | sed 's/://g'`
		if [ -n "`echo \"$NET_HOSTNAME\" | sed -n '/\*/p'`" ]; then
			CLIENT_NAME=`echo "$NET_HOSTNAME" | sed "s/\*/$CLIENT_MAC/"`
		else
			CLIENT_NAME=$NET_HOSTNAME
		fi
		if [ -e /etc/thinstation.hosts ] ; then
			clientname=`cat /etc/thinstation.hosts | grep -i $CLIENT_MAC | cut -d" " -f 1`
			if [ -n "$clientname" ] ; then
				CLIENT_NAME=$clientname
			fi
		fi
		if [ "$CLIENT_NAME" == "(none)" ]; then
			unset CLIENT_NAME
		else
			hostnamectl set-hostname $CLIENT_NAME
			echo "127.0.0.1 `hostname` localhost" >> /etc/hosts
		fi
	fi
fi

# Functions

get_debug_level ()
{
    local dlevel=1 x=7 num
    num=$1
    while [ $x -gt 0 ] ; do
          let x=x-1
          let dlevel=$((num/(2**x)))
          if [ $dlevel -gt 0 ] ; then
                let num=$((num-(2**x)))
                case $x in
                0)
                  DEBUG_BOOT=1
                  ;;
                1)
                  DEBUG_NETWORK=2
                  ;;
                2)
                  DEBUG_INIT=4
                  ;;
                3)
                  DEBUG_KERNEL=8
                  ;;
                4)
                  DEBUG_MODULES=16
                  ;;
                5)
                  DEBUG_PACKAGES=32
                  ;;
                6)
                  DEBUG_EMAIL=64
                  ;;
                esac
          fi
    done
}

free_memory()
{
          if is_enabled $FREE_MEMORY ; then
                rm -rf /lib/modules/*
                sync
                echo 3 > /proc/sys/vm/drop_caches
          fi
}

# Determine what transport method to download config files
transport()
{
	local spath=$1 cpath=$2 server=$3

	# Set default if variable not set
	if [ -z "$NET_FILE_METHOD" ] ; then
		NET_FILE_METHOD=tftp
	fi

	case $(make_caps $NET_FILE_METHOD) in
	TFTP)
		echo "tftp -g -r $spath -l $cpath $server > /dev/null 2>&1"
	;;
	SCP)
		echo "scp -BC $NET_FILE_USER@$server:$spath $cpath"
	;;
	WGET|HTTP)
		echo "wget -O $cpath $BASEURL/$spath"
	;;
	esac
}

# If thinstation.network/user is a dos file, converts it to unix

cleanup ()
{
	if [ -e $TS_NETWORK ] ; then
		sed -e 's/\^M//g' $TS_NETWORK > $TS_NETWORK.tmp
		cat $TS_NETWORK.tmp > $TS_NETWORK
		rm $TS_NETWORK.tmp
	fi
	if [ -e $TS_USER ] ; then
		sed -e 's/\^M//g' $TS_USER > $TS_USER.tmp
		cat $TS_USER.tmp > $TS_USER
		rm $TS_USER.tmp
	fi

}

parse_tpl ()
{
    if [ -f $1.tpl ]; then
	cat $1.tpl | sed -f /tmp/script > $1
    fi
}

# Log to file and console
echo_log ()
{
	local debug noline string

	until [ -z "$1" ]; do
		case "$1" in
		"-n")
			noline="-n"
		;;
		"-d")
			debug="TRUE"
		;;
		*)
			string="$1"
		;;
		esac
		shift
	done
	if [ -n "$debug" ] ; then
		echo -e $noline "$string" > $CONSOLE
	fi
	if [ -z "$APPLOG" ]; then
	  echo -e $noline "$string" >> $LOGFILE
	else
	  echo -e $noline "$string" >> $APPLOG
	fi
}

## PKG functions

pkg_is_loaded ()
{
	if [ -f /etc/init.d/$1 ] ; then
		return 0
	else
		return 1
	fi
}

pkg_is_executable ()
{
	if [ -x /bin/$1 ] ; then
		return 0
	else
		return 1
	fi
}

pkg_initialized ()
{
	if [ -f /var/packages/$1 ]; then
		return 0
	else
		return 1
	fi
}

pkg_set_init_flag ()
{
	touch /var/packages/$1
}

## Make variable capitals

make_caps ()
{
	if [ -n "$1" ]; then
		echo $1 | tr [a-z] [A-Z]
	else
		return 1
	fi
}

## Make variable lower

make_lower ()
{
	if [ -n "$1" ]; then
		echo $1 | tr [A-Z] [a-z]
	else
		return 1
	fi
}

make_capital ()
{
	local word words badlist oneword x=0

	if [ "$1" = "-1" ] ; then
		oneword="TRUE"
		shift
	fi
	if [ $# -gt 1 ]; then
		until [ -z "$1" ]; do
			let x=x+1
			case $1 in
				VNC|TCP|ZLIB|SSL|CUPSD|JPEG|RDP|PNG|IPPPort|IPPPrinting)
					word=$1
				;;
				*)
					if [ -z "$oneword" ] || [ $x -eq 1 ] ; then
						word=$(echo $1 | cut -c1 | tr [a-z] [A-Z])
						word=$word$(echo $1 | cut -c2- | tr [A-Z] [a-z])
					else
						word=$(echo $1 | tr [A-Z] [a-z])
					fi
				;;
			esac
			shift
			words="$words $word"
		done
		echo $words
	else
		case $1 in
			VNC|TCP|ZLIB|SSL|CUPSD|JPEG|RDP|PNG|IPPPort|IPPPrinting)
				word=$1
			;;
			*)
				word=$(echo $1 | cut -c1 | tr [a-z] [A-Z])
				word=$word$(echo $1 | cut -c2- | tr [A-Z] [a-z])
		esac
		echo $word
	fi
}

## Replace on or off with #

replace_variable ()
{
	if is_enabled $1 ; then
		echo " "
	else
		echo "#"
	fi
}

## Replace space

replace_char ()
{
	echo $1 | sed -e "s/$2/$3/g"
}

# Check for invalid characters in options line

replace_invalid ()
{
	echo $1 |sed -e 's/\\/\\\\/g' | sed -e 's/ /\\ /g' | sed -e 's/\-/\\\-/g' | sed -e 's/\//\\\//g' | sed -e 's/\"/\\\\\"/g'
}


# Overwrite file with sed command
sed_file ()
{
	cat $1 | sed -e $2 > /tmp/sed.tmp
	cat /tmp/sed.tmp > $1
	rm /tmp/sed.tmp
}

## Restart xinetd
restart_xinetd ()
{
	XPID=$(pidof xinetd)
	kill -SIGHUP $XPID
}

# Checks when to reboot PC
check_reboot ()
{
	if is_enabled $DAILY_REBOOT ; then
		if uptime | grep day; then
			reboot
		fi
	fi
}

# Cleans up X if it shuts down unexpected
check_xrunning ()
{
	if ! ps -ef | grep "$X_SERVER" | grep -q " :$DISPLAY_NUMBER"; then
		if [ -e /tmp/.X11-unix/X$DISPLAY_NUMBER ] ; then
			rm /tmp/.X11-unix/X$DISPLAY_NUMBER
		fi
	fi
}

# Checks to see if nxssh is running
check_NX ()
{
	while ps | grep -v grep | grep "nxssh";	do
		sleep 5
	done
}


# Check if Module loaded
check_module ()
{
	if lsmod | grep $1 > /dev/null ; then
		return 0
	else
		return 1
	fi
}

module_available ()
{
	if modprobe -D $1 &>/dev/null ; then
		return 0
	else
		return 1
	fi
}

# Get Free XServer Number
getfreescreen ()
{
	local X_NUMBER

	X_NUMBER=$(ps -o args | grep "^Xorg " | cut -f2 -d: | cut -f1 -d" ")
	x_NUMBER=$X_NUMBER $(ps -o args | grep "^Xnest "  | cut -f2 -d: | cut -f1 -d" ")
	let XNEST_NUMBER=0
	for x in $x_NUMBER; do
		if [ "$x" -ge "$XNEST_NUMBER" ] ; then
			let XNEST_NUMBER=x+1
		fi
	done
}

get_filesystems ()
{
	for filename in $FILESYSTEMS; do
		if [ -e $MOD_PATH/inbuilt/$filename.ko ] || [ -e $MOD_PATH/loaded/$filename.ko ] ; then
			if [ "$filename" != "supermount" ] ; then
				filesystem=$filename:$filesystem
			fi
			if ! check_module $filename ; then
				modprobe -q $filename
			fi
		fi
	done
	let length=${#filesystem}-1
	if [ "$length" -gt 0 ] ; then
		filesystem=$(echo $filesystem | cut -c 1-$length)
	fi
}

getpostcontent ()
{
	CONTENT=
	if [ -n "$CONTENT_LENGTH" ]; then
		read CONTENT
	fi
	if [ -n "$CONTENT" ]; then
		eval $(echo "&$CONTENT" | sed s/"&"/"\nCGI_"/g)
	fi
}


# Below code taken from PXES with modifications

#----------------------------------------------------------------------
#      ___       ___ ___   P X E S   Universal  Linux  Thin  Client
#     /__/\\_// /__ /__    Copyright(C) 2003 by Diego Torres Milano
#    /    // \\/__  __/    All rights reserved.  http://pxes.sf.net
#
# Author: Diego Torres Milano <diego@pxes.com.ar>
# $Id: xtools,v 1.2 2003/09/25 02:10:34 diego Exp $
#----------------------------------------------------------------------

refresh ()
{
	local UPDATE=${1:-60}

	echo '
<meta HTTP-EQUIV="REFRESH" CONTENT="'$UPDATE'">
<meta HTTP-EQUIV="EXPIRES" CONTENT="'$(/bin/date +%s)'">
'
}

header ()
{
	echo -e "Content-Type: text/html\n"
	echo '
<html>

<head>
  <title>:: ThinStation ::</title>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <link href="../style.css" rel="stylesheet" type="text/css">
</head>

<body bgcolor="#FFFFFF" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">

<tr>
	<a href="../index.html">
            <img src="../images/ts_logo.jpg" width="650" height="153" border="0" alt="Thinstation logo">
	</a>
</tr>


<h2>Thinstation '$(echo $TS_VERSION)' on '$(hostname)' :: '$(basename $0 .cgi)'</h2>
<pre>&nbsp;</pre>
'
}

trailer ()
{
	echo '</body>'
	echo '</html>'
}

# Verify's Web Password

getpasswd ()
{
	local LOGIN=$1

	set +x

	if [ -z "$LOGIN" ]
	then
		echo "ERROR: Invalid login" >&2
		return
	fi

	sed -n "s/^$LOGIN:\\([^:]*\\):.*/\\1/p" < /etc/passwd
}

verify_password ()
{
	local LOGIN=$1 PASSWD=$2 p s e

	if [ -z "$LOGIN" ]
	then
		echo "Null login" >&2
		return 1
	fi

	if [ -z "$PASSWD" ]
	then
		echo "Null password" >&2
		return 1
	fi

	p=$(getpasswd $LOGIN)
	s=$(echo "$p" | cut -f1-3 -d\$)
	e=$(/bin/checkpass $PASSWD $s)

	if [ "$p" = "$e" ]
	then
		return 0
	else
		return 1
	fi
}


# args: list of files to save when the cache is umounted
#       Note that the 'profile' file is already handled and thus shouldn't
#       be included in the list.
pgrep ()
{
	ps |grep $1 |grep -v grep |awk '{print $1}'
}

mounted ()
{
	if [ $(cat /proc/mounts |grep -c -e $1) -ne 0 ]; then
		return 0
	else
		return 1
	fi
}

is_enabled ()
{
	if [ -n "$1" ]; then
		value=$(make_caps $1)
		for i in TRUE ON ENABLED ENABLE YES POSITIVE Y; do
			if [ $value == $i ]; then
				return 0
			fi
		done
	fi
	return 1
}

is_disabled ()
{
	if [ -n "$1" ]; then
		value=$(make_caps $1)
		for i in FALSE OFF DISABLED DISABLE NO NEGATIVE N ; do
			if [ $value == $i ]; then
				return 0
			fi
		done
	fi
	return 1
}

screen_res ()
{
	if [ -z "$SCREEN_RESOLUTION" ]; then
		video=$(cat /proc/cmdline |grep -o -E video=[a-zA-Z0-9:,-]+ |head -n 1 |cut -d = -f2)
		if [ -n "$video" ] && [ "$video" != "uvesafb:off" ]; then
			SCREEN_RESOLUTION=$(echo $video |cut -d ":" -f2 |cut -d "-" -f1)
		else
			SCREEN_RESOLUTION=$PREFERED_RES
		fi
	fi
}

use_xrandr ()
{
	if is_enabled $USE_XRANDR ; then
		echo "Using xrandr to set display resolution." >> $APPLOG
		if [ -z "$XRANDR_OPTIONS" ]; then
			XRANDR_OPTIONS="-s $SCREEN_RESOLUTION"
		elif [ "$XRANDR_OPTIONS" == "dualscreen" ]; then
			scrns=$(xrandr -q | grep " connected" | cut -d " " -f1)
			numscrns=$(echo $scrns | wc -w)
			if [ $numscrns -gt 1 ] ; then
				out1=$(echo $scrns | cut -d " " -f1)
				out2=$(echo $scrns | cut -d " " -f2)
				if [ -n "$SCREEN_RESOLUTION" ]; then
					XRANDR_OPTIONS="--output $out1 --mode $SCREEN_RESOLUTION --left-of $out2 --primary --output $out2 --mode $SCREEN_RESOLUTION"
				else
					XRANDR_OPTIONS="--output $out1 --left-of $out2 --primary"
				fi
			else
				XRANDR_OPTIONS="-s $SCREEN_RESOLUTION"
			fi
		fi
		xrandr $XRANDR_OPTIONS 2>/dev/null
	fi
}

use_wallpaper ()
{
	if is_enabled $USE_WALLPAPER && [ -e /bin/wmsetbg ] && [ "$WMNAME" != "xfwm4" ]; then
		if [ -f /etc/background.jpg ] ; then
			wmsetbg /etc/background.jpg 2>/dev/null
		elif [ -f /etc/background-$SCREEN_RESOLUTION.jpg ] ; then
			wmsetbg /etc/background-$SCREEN_RESOLUTION.jpg 2>/dev/null
		elif [ -f /etc/background-1024x768.jpg ]; then
			wmsetbg /etc/background-1024x768.jpg 2>/dev/null
		else
			echo_log "No wallpaper found"
		fi
	fi
}

use_idesk ()
{
	if [ -x /bin/idesk ] && [ "$WMNAME" != "xfwm4" ]; then
		IDESKPID=$(pidof idesk)
		if [ -n "$IDESKPID" ]; then
			kill -HUP $IDESKPID
			wait $IDESKPID
		fi
		if [ -e ~/.idesktop ]; then
			rm -rf ~/.idesktop
		fi
		mkdir ~/.idesktop
		. /etc/idesk.functions
		idesk_icons
		/bin/idesk &
	fi
}

x_mod_map ()
{
	# Add xmodmap modifications
	if [ -e /lib/kmaps/$KEYBOARD_MAP.xmod ] && [ "$WMNAME" != "xfwm4" ]; then
		xmodmap /lib/kmaps/$KEYBOARD_MAP.xmod
	fi
}

x_numlock ()
{
	if is_enabled $X_NUMLOCK ; then
		numlockx $(make_lower $X_NUMLOCK)
	fi
}

x_auth_file ()
{
	# If Don't already have an Xauthority file, create one now.
	if [ ! -e $HOME/.Xauthority ] ; then
		touch $HOME/.Xauthority
		xauth -f $HOME/.Xauthority generate $DISPLAY . trusted >> $APPLOG 2>&1
	fi
}

x_wm ()
{
	# Are we going to run a real window manager?
	if [ "$PACKAGE" == "$WMNAME" ]; then
		return 0
	fi
	return 1
}

x_mouse ()
{
	# If we don't have a Window Manager, give the mouse a place to hang out.
	if ! x_wm ; then
		xsetroot -cursor_name left_ptr >> $APPLOG 2>&1 &
	fi
	# Set the mouse acceleration speed
	if [ -n "$MOUSE_ACCELERATION" ]; then
		echo xset -display :$DISPLAY_NUMBER m ${MOUSE_ACCELERATION} 1 >> $APPLOG
		xset -display :$DISPLAY_NUMBER m ${MOUSE_ACCELERATION} 1 >> $APPLOG 2>&1 &
	fi
}

make_res_list ()
{
	xrandr 2>/dev/null |grep -o '   [0-9]*x[0-9]*' |sed -r 's/ //g' |sort -u -t'x' -k1n -k2n > /var/run/applications/resolutions
}

get_res ()
{
	xrandr 2>/dev/null |grep -e \* |cut -d' ' -f4
}

check_last_session ()
{
	if [ $(ls -l $APPLOGDIR |grep -e xorg -c) -gt 0 ]; then
		lastlog=$(ls -ltr $APPLOGDIR |grep -e xorg |tail -n1 |cut -c 58-)
		if [ $(tail -n1 $APPLOGDIR/$lastlog |grep -cF '(0)') -gt 0 ]; then
			return 0
		else
			return 1
		fi
	fi
}

hide_cursor ()
{
	echo -en "\033[?25l"
}

show_cursor ()
{
	echo -en "\033[?12l\033[?25h"
}

dconf_proxy_configure ()
{
	if which dconf > /dev/null 2>&1; then
		# Ignore needs more work
	set -x
		if [ -n "$PROXY_IGNORE" ]; then
			unset hosts
			IFS=','
			for host in $PROXY_IGNORE; do
				host="`echo $host|sed 's/ //g'`"
				hosts="$hosts, '$host'"
			done
			unset IFS
			hosts="[`echo $hosts |cut -c3-`]"

			dconf write /org/gnome/system/proxy/ignore-hosts "$hosts"
		fi
	set +x
	if [ -n "$PROXY_HOST" ] && [ -n "$PROXY_PORT" ] ; then
			dconf write /org/gnome/system/proxy/http/host "'$PROXY_HOST'"
			dconf write /org/gnome/system/proxy/http/port "$PROXY_PORT"

			if [ -z "$PROXY_USE_SAME$PROXY_SECURE_HOST$PROXY_SOCKS_HOST$PROXY_FTP_HOST" ]; then
				PROXY_USE_SAME=true
			fi
			if is_enabled $PROXY_USE_SAME; then
				PROXY_SECURE_HOST=$PROXY_HOST
				PROXY_SECURE_PORT=$PROXY_PORT
				PROXY_SOCKS_HOST=$PROXY_HOST
				PROXY_SOCKS_PORT=$PROXY_PORT
				PROXY_FTP_HOST=$PROXY_HOST
				PROXY_FTP_PORT=$PROXY_PORT
			fi

		fi

		if [ -n "$PROXY_SECURE_HOST" ] && [ -n "$PROXY_SECURE_PORT" ]; then
			dconf write /org/gnome/system/proxy/https/host "'$PROXY_SECURE_HOST'"
			dconf write /org/gnome/system/proxy/https/port "$PROXY_SECURE_PORT"
		fi
		if [ -n "$PROXY_SOCKS_HOST" ] && [ -n "$PROXY_SOCKS_PORT" ]; then
			dconf write /org/gnome/system/proxy/socks/host "'$PROXY_SOCKS_HOST'"
			dconf write /org/gnome/system/proxy/socks/port "$PROXY_SOCKS_PORT"
		fi
		if [ -n "$PROXY_FTP_HOST" ] && [ -n "$PROXY_FTP_PORT" ]; then
			dconf write /org/gnome/system/proxy/ftp/host "'$PROXY_FTP_HOST'"
			dconf write /org/gnome/system/proxy/ftp/port "$PROXY_FTP_PORT"
		fi
		if [ -n "$PROXY_AUTOCONFIG" ]; then
			dconf write /org/gnome/system/proxy/autoconfig-url "'$PROXY_AUTOCONFIG'"
		fi

		if [ "$PROXY_MODE" == "none" ] \
		|| [ -z "$PROXY_MODE$PROXY_HOST$PROXY_SECURE_HOST$PROXY_FTP_HOST$PROXY_SOCKS_HOST$PROXY_AUTOCONFIG" ]; then
			dconf write /org/gnome/system/proxy/mode "'none'"
		elif [ "$PROXY_MODE" == "auto" ] \
		|| [ -z "$PROXY_MODE" ] \
		&& [ -n "$PROXY_AUTOCONFIG" ]; then
			dconf write /org/gnome/system/proxy/mode "'auto'"
		else
			dconf write /org/gnome/system/proxy/mode "'manual'"
		fi
	fi
}

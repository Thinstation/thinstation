#!/bin/bash
# Description: Thinstation Utility to install chroot for Thinstation Development
# URL: http://www.thinstation.org
# Maintainer: Donald A. Cupp Jr. (don cupp jr at ya hoo dot com)

stage1()
{
	echo "Chroot not previously setup. Doing it NOW!"

	for dir in proc sys home dev mnt downloads var/lib/pkg; do
		if [ ! -e $dir ] ; then
				mkdir -p -m 755 $dir
		fi
	done

	touch var/lib/pkg/db

	if [ ! -e tmp ]; then
		mkdir -m 1777 tmp
	fi
	if [ ! -e root ]; then
		mkdir -m 750 root
		mkdir -p root/.parallel/
		touch root/.parallel/ignored_vars
	fi

	for core_port in filesystem acl attr libcap coreutils pkgutils glibc bash readline ncurses findutils libpcre grep sed;
		do
			pkg=`find -L $ROOT/ts/ports/core/$core_port |grep -E pkg\.tar\."xz|gz" |grep -e "pkg.tar"`
			tar -p -o -C $ROOT -xf $pkg 2> /dev/null
		done

	if [ ! -d $ROOT/var/lib/pkg ]; then
		mkdir -p $ROOT/var/lib/pkg
		touch $ROOT/var/lib/pkg/db
	fi

	if [ -d $ROOT/var/lib/pkg/rejected ]; then
		rm -rf $ROOT/var/lib/pkg/rejected
	fi

	touch $ROOT/dostage2
}

stage2()
{
	for Pkgfile in `find -L $ROOT/ts/ports -name Pkgfile |grep -Ev "proprietary|binary-core|binary-opt|broken"`;do
		install_port
	done
	printf "\rPort Installation %-40s\n" "Complete"
	post_install
	rm /dostage2
	touch /dostage3
}

stage3()
{
	for i in `ls --color=never $TSWRKNG/packages` ;
		do
			printf "\rPopulating Package %-40s" "$i"
			cd $TSWRKNG/packages/$i
			if [ -e /ts/unwind_cache/$i.turbo ]; then
				if cat /ts/unwind_cache/$i.turbo |grep -e "#" |cut -d "#" -f2 |md5sum -c --quiet ; then
					. /ts/unwind_cache/$i.turbo
				else
					update $i
				fi
			else
				update $i
			fi
		done
	printf "\rPackage Population %-40s\n" "Complete"
	echo "Populating tools"
	update -t
	cd $TSWRKNG
	./build --regenconf
	if [ ! -e /build ] ; then
		ln -sf ts/build /build
	fi
	rm /dostage3
	touch /dostage4
}

stage4()
{
	rm /dostage4
	printf "\rLooking at core binary ports\n"
        for Pkgfile in `find -L $ROOT/ts/ports -name Pkgfile |grep -E "binary-core"`;do
                if ! install_port; then
                        port_name=`echo $Pkgfile |cut -d "/" -f6`
			if ! $autodl; then
	                        answered=false
        	                while ! $answered; do
                	                printf "Would you like to try and build it now? Y/N:"
                        	        read -n 1 answer
                                	case $answer in
                                        	Y|y) prt-get install -fr -if -im $port_name;answered=true;;
	                                        n|n) answered=true;;
        	                                *) answered=false;;
                	                esac
                        	done
			else
				prt-get install -fr -if -im $port_name
			fi
			printf "\n"
                fi
        done
        printf "\rBinary Core Port Installation %-40s\n" "Complete"
	post_install
}

install_port()
{
	. $Pkgfile
	port_name=`echo $Pkgfile |cut -d "/" -f6`
	port_dir=`echo $Pkgfile |cut -d "/" -f1-6`
	pkg_name="`find -L $port_dir -type f -name ${name}#${version}-${release}.pkg.tar.\* -printf '%f'`"
	printf "\rInstalling Port %-40s" "$port_name"
	if [ -f $port_dir/$pkg_name ]; then
		/usr/bin/pkgadd -f $port_dir/$pkg_name
		if [ -e $port_dir/pre-install ]; then
			echo ". $port_dir/pre-install" >> $ROOT/post-install.sh
		fi
		if [ -e $port_dir/post-install ]; then
			echo ". $port_dir/post-install" >> $ROOT/post-install.sh
		fi
		return 0
	else
		printf "Could not find an archive.\n"
		return 1
	fi
}

post_install()
{
	if [ -e /post-install.sh ]; then
		source /post-install.sh
		rm /post-install.sh
	fi
}

if [ -z "$autodl" ]; then
	autodl=false
fi

ROOT=$PWD
if [ -e $ROOT/dostage4 ]; then
		stage4
	elif [ -e $ROOT/dostage3 ]; then
		stage3
	elif [ -e $ROOT/dostage2 ]; then
		stage2
	else
		stage1
fi

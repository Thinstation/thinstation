#!/bin/bash
# Description: Thinstation Utility to install chroot for Thinstation Development
# URL: http://www.thinstation.org
# Maintainer: Donald A. Cupp Jr. (don cupp jr at ya hoo dot com)

core_ports="filesystem acl attr libcap coreutils pkgutils glibc bash readline ncurses findutils libpcre grep sed tar xz gzip"

stage1()
{
	echo "Chroot not previously setup. Doing it NOW!"

	for dir in proc sys home dev mnt downloads var/lib/pkg; do
		if [ ! -e $dir ] ; then
				mkdir -p -m 755 $dir
		fi
	done

	touch var/lib/pkg/db

	if [ ! -e tmp ]; then
		mkdir -m 1777 tmp
	fi
	if [ ! -e root ]; then
		mkdir -m 750 root
		mkdir -p root/.parallel/
		touch root/.parallel/ignored_vars
	fi

	for core_port in $core_ports; do
		pkg=`find -L $ROOT/ts/ports/core/$core_port |grep -E pkg\.tar\."xz|gz" |grep -e "pkg.tar"`
		tar -p -o -C $ROOT -xf $pkg 2> /dev/null
	done
	ln -sf lib lib64
	if [ ! -d $ROOT/var/lib/pkg ]; then
		mkdir -p $ROOT/var/lib/pkg
		touch $ROOT/var/lib/pkg/db
	fi

	if [ -d $ROOT/var/lib/pkg/rejected ]; then
		rm -rf $ROOT/var/lib/pkg/rejected
	fi

	touch $ROOT/dostage2
}

stage2()
{
	exclude=`echo "$core_ports"|sed -e 's/ /\/\|/g'`
	mkdir -p /var/lib/pkg
	procs=`nproc`
	let procs-=1
	for Root in $ROOT/ts $XTRWRKNG; do
		find -L $Root/ports -name Pkgfile | \
		grep -Ev "proprietary|binary-core|binary-opt" | \
		grep -Ev "$exclude" | \
		xargs -n 1 -P $procs -I {} bash -c 'install_port "$@"' _ {}
	done
	for core_port in $core_ports; do
               	Pkgfile=$ROOT/ts/ports/core/$core_port/Pkgfile
		install_port $Pkgfile
	done
	add_to_db
	printf "\rPort Installation %-40s\n" "Complete"
	post_install
	rm /dostage2
	touch /dostage3
}

stage3()
{
	for Root in $TSWRKNG $XTRWRKNG; do
		if [ $Root = $TSWRKNG ]
		then Cache=/ts
		else Cache=$Root
		fi
		export Root
		export Cache
		procs=`nproc`
                let procs-=1
		ls --color=never $Root/packages |xargs -n 1 -P $procs -I {} bash -c 'unwind_package "$@"' _ {}
	done
	printf "\rPackage Population %-40s\n" "Complete"
	echo "Populating tools"
	update -t
	cd $TSWRKNG
	./build --regenconf
	if [ ! -e /build ] ; then
		ln -sf ts/build /build
	fi
	rm /dostage3
	touch /dostage4
}

unwind_package()
{
	pkg=$1
	printf "\rPopulating Package %-40s" "$pkg"
        cd $Root/packages/$pkg
        if [ -e $Cache/unwind_cache/$pkg.turbo ]; then
        	if cat $Cache/unwind_cache/$pkg.turbo |grep -e "#" |cut -d "#" -f2 |md5sum -c --quiet ; then
                	. $Cache/unwind_cache/$pkg.turbo
                else
                       	update $pkg
                fi
        else
              	update $pkg
        fi
}

stage4()
{
	rm /dostage4
	printf "\rLooking at core binary ports\n"
	if ! $autodl; then
		procs=1
	else
		procs=`nproc`
	        let procs-=1
	fi
        for Root in $ROOT/ts $XTRWRKNG; do
                find -L $Root/ports -name Pkgfile | \
                grep -E "binary-core" | \
                xargs -n 1 -P $procs -I {} bash -c 'install_binary_port "$@"' _ {}
        done
	add_to_db
        printf "\rBinary Core Port Installation %-40s\n" "Complete"
	post_install
}

update_db()
{
	for db in `find /tmp/ -name \*.db`; do
                cat $db >> /var/lib/pkg/db
                echo "" >> /var/lib/pkg/db
		rm $db
        done
}

install_binary_port()
{
	Pkgfile=$1
	if ! install_port $Pkgfile; then
		port_name=`echo $Pkgfile |cut -d "/" -f6`
		if ! $autodl; then
			answered=false
			while ! $answered; do
				printf "Would you like to try and build it now? Y/N:"
				read -n 1 answer
				case $answer in
					Y|y) prt-get install -fr -if -im -is $port_name;answered=true;;
					n|n) answered=true;;
					*) answered=false;;
				esac
			done
		else
			prt-get install -fr -if -im -is $port_name
		fi
		printf "\n"
	fi
}

install_port()
{
	Pkgfile=$1
	. $Pkgfile
	port_dir=`dirname $Pkgfile`
	port_name=`basename $port_dir`
	pkg_name="`find -L $port_dir -type f -name ${name}#${version}-${release}.pkg.tar.\* -printf '%f'`"
	printf "\rInstalling Port %-40s" "$port_name"
	if [ -f $port_dir/$pkg_name ]; then
		echo $name > /tmp/$name.db
		echo $version-$release >> /tmp/$name.db
		tar -xvf $port_dir/$pkg_name -C / >> /tmp/$name.db 2>&1 |grep -v Ignore #|| rm /tmp/$name.db && echo "$pkg_name failed"
#		/usr/bin/pkgadd -f $port_dir/$pkg_name
		if [ -e $port_dir/pre-install ]; then
			echo ". $port_dir/pre-install" >> $ROOT/post-install.sh
		fi
		if [ -e $port_dir/post-install ]; then
			echo ". $port_dir/post-install" >> $ROOT/post-install.sh
		fi
		return 0
	else
		printf "Could not find an archive.\n"
		return 1
	fi
}

add_to_db()
{
	for db in `find /tmp/ -name \*.db`; do
                cat $db >> /var/lib/pkg/db
                echo "" >> /var/lib/pkg/db
		rm $db
        done
}

post_install()
{
	if [ -e /post-install.sh ]; then
		source /post-install.sh
		rm /post-install.sh
	fi
}

export -f unwind_package
export -f install_port
export -f install_binary_port

if [ -z "$autodl" ]; then
	autodl=false
fi

ROOT=$PWD
if [ -e $ROOT/dostage4 ]; then
		stage4
	elif [ -e $ROOT/dostage3 ]; then
		stage3
	elif [ -e $ROOT/dostage2 ]; then
		stage2
	else
		stage1
fi

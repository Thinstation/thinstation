#!/bin/bash
# Description: Thinstation Utility to strip out extra files from a binary Package
# URL: http://www.thinstation.org
# Maintainer: Donald A. Cupp Jr. (don cupp jr at ya hoo dot com)


show_help()
{
echo "
This utility is designed to simplify the folder layout of a crux port into a
ts package. It will decompress the compiled port archive the belongs to the
specified package and mangle it for integration into thinstation. By default,
the destination will be in $TSWRKNG/packages/(specified package) folder.
This can be overriden with the -t or --temp (path to temp folder)
syntax.

Usage: repackage (-t (path to temp folder)) (crux port)

"
}

get_opts()
{
	if [ -z "$1" ] ; then show_help ; exit 255 ; fi
	until [ -z "$1" ] ; do
		case "$1" in
			-h|--help)		show_help ; exit 255 ;;
			-t|--temp)		temp_folder="$2" ; shift ;;
			-e|--env)		from_env ; exit 0 ;;
			-c|--clean)		clean ; exit 0 ;;
			*)			package="$1" ;;
		esac
		shift
	done
}

package_path()
{
	if [ "$temp_folder" != "" ] ; then
		pkgpath="$temp_folder/$package"
		return 0
	else
		pkgpath="$TSWRKNG/packages/$package"
		for work in $TSWRKNG $XTRWRKNG; do
			if [ -d "$work/packages/$package" ]; then
				pkgpath="$work/packages/$package"
				return 0
			fi
		done
		return 1
	fi
}

extract_archive()
{
	ppath=`prt-get path $package`
	if [ -z "$ppath" ]; then
		exit 1
	fi
	if [ ! -d $pkgpath ]; then
		mkdir -p $pkgpath
	fi
	. $ppath/Pkgfile
	archive="`find -L $ppath -type f -name ${name}#${version}-${release}.pkg.tar.\* -printf '%f'`"
	if [ ! -f $ppath/$archive ]; then
		printf "Port $package has not yet been built.\n"
		if [ -n "$AUTODL" ] && $AUTODL; then
			install_port=true
		else
			answered=false
			while ! $answered; do
				printf "Would you like to try and build it now? Y/N:"
				read -n 1 answer
				case $answer in
					Y|y)	install_port=true
						answered=true
					;;
					n|n) answered=true; exit 1;;
					*) answered=false;;
				esac
			done
		fi
		if $install_port; then
			prt-get install --install-scripts -fr -if -im -is $package
			archive="`find -L $ppath -type f -name ${name}#${version}-${release}.pkg.tar.\* -printf '%f'`"
		fi
	fi
	bsdtar -pxf $ppath/$archive -C $pkgpath 2>/dev/null
}

preserve_empty_working()
{
	for usefuldir in `find $pkgpath -type d -empty`; do
		touch $usefuldir/.gitignore
	done
}

shallow_usr()
{
	for usr_dir in usr usr/local ; do
		for essential_dir in sbin bin lib etc var libexec; do
			if [ -d $pkgpath/$usr_dir/$essential_dir ] && [ -n "`ls -A $pkgpath/$usr_dir/$essential_dir`" ]; then
				mkdir -p $pkgpath/$essential_dir
				cp -a $pkgpath/$usr_dir/$essential_dir $pkgpath/.
				rm -rf $pkgpath/$usr_dir/$essential_dir
			fi
		done
	done
}

redirect_sbin()
{
	if [ -e $pkgpath/sbin ] && [ -n "`ls -A $pkgpath/sbin`" ]; then
		mkdir -p $pkgpath/bin
		cp -a $pkgpath/sbin/* $pkgpath/bin
		rm -rf $pkgpath/sbin
	fi
}

redirect_shared()
{
	for share_dir in share usr/share usr/local/share ; do
		if [ -d $pkgpath/$share_dir ] && [ -n "`ls -A $pkgpath/$share_dir`" ]; then
#			if [ -d $pkgpath/$share_dir/dbus-1 ] && [ -n "`ls -A $pkgpath/$share_dir/dbus-1`" ]; then
#				mkdir -p $pkgpath/etc/dbus-1
#				cp -a $pkgpath/$share_dir/dbus-1/* $pkgpath/etc/dbus-1
#				rm -rf $pkgpath/$share_dir/dbus-1
#			fi
			for shared_object in `ls --color=never $pkgpath/$share_dir` ; do
				mkdir -p $pkgpath/lib
				cp -a $pkgpath/$share_dir/$shared_object $pkgpath/lib/.
				rm -rf $pkgpath/$share_dir/$shared_object
			done
		fi
		if [ -d $pkgpath/$share_dir ] ; then
			rmdir $pkgpath/$share_dir
		fi
	done
}

extra_dirs()
{
	extra_dirs="man pkgconfig aclocal gtk-doc help vala gir-1.0 girepository-1.0 locale bash-completion cmake omf"
	if [ "$package" != "python" ] ; then
		extra_dirs="$extra_dirs include"
	fi
	for extra_dir in $extra_dirs ; do
		if [ -d $pkgpath/$extra_dir ] ; then
			rm -rf $pkgpath/$extra_dir
		fi
		if [ -d $pkgpath/usr/$extra_dir ] ; then
			rm -rf $pkgpath/usr/$extra_dir
		fi
		if [ -d $pkgpath/usr/local$extra_dir ] ; then
			rm -rf $pkgpath/usr/local/$extra_dir
		fi
		if [ -d $pkgpath/lib/$extra_dir ] ; then
			rm -rf $pkgpath/lib/$extra_dir
		fi
	done
	for  include in include local/include ; do
		if [ -d $pkgpath/usr/$include ] ; then
			cp -a $pkgpath/usr/$include/* $pkgpath/lib/.
			rm -rf $pkgpath/usr/$include
			ln -sf /lib $pkgpath/usr/$include
		fi
	done
}

extra_files()
{
	find $pkgpath -name *.a -delete
	find $pkgpath -name *.la -delete
}

remove_empty()
{
	find $pkgpath -type d -empty -delete
}

clean()
{
	package=$PACKAGE
	if [ -n "$PACKAGE" ] && package_path; then
		for object in `ls -A --color=never $pkgpath |grep -E -v 'build|.dna|.gitignore|dependencies'`; do
			rm -rf $pkgpath/$object
		done
		rm -f $pkgpath/build/installed
	else
		echo "$PACKAGE does not exist"
		exit 1
	fi
}

cut_bloat()
{
	for bloat in $DROP_FILES; do
		find $INSTALLDIR -type f -name $bloat -delete
	done
	for bloat in $DROP_FILES; do
		find $INSTALLDIR -type l -name $bloat -delete
	done
	for bloat in $DROP_DIRS; do
		rm -rf $INSTALLDIR/$bloat
	done
}

create_empty()
{
	for folder in $CREATE_EMPTY_DIRS; do
		mkdir -p $INSTALLDIR/$folder
	done
}

merge_trunk()
{
	if [ -e $INSTALLDIR/build/extra ]; then
		for dir in `find $INSTALLDIR/build/extra -type d -printf "%P\n"`; do
			mkdir -p $INSTALLDIR/$dir
		done
		IFS=$'\n\t'
		for file in `find $INSTALLDIR/build/extra ! -type d -printf "%P\n"`; do
			if [ -e $INSTALLDIR/"$file" ]; then
				rm $INSTALLDIR/"$file"
			fi
			ln $INSTALLDIR/build/extra/"$file" $INSTALLDIR/"$file"
		done
		unset IFS
	fi
}

from_env()
{
	for i in $TSWRKNG $XTRWRKNG; do
		if [ -d $i/packages/$PACKAGE ]; then
			INSTALLDIR=$i/packages/$PACKAGE
		fi
	done
	temp_folder=./build-$PACKAGE
	for package in $PORTS; do
		main
		cp -Prf $temp_folder/$package/* $INSTALLDIR/.
		rm -rf $temp_folder
	done
	cut_bloat
	create_empty
	merge_trunk
	touch $INSTALLDIR/build/installed
}

reduce_libs()
{
	if [ -e $pkgpath/lib ]; then
		for link in `find $pkgpath/lib -mindepth 1 -maxdepth 1 -type l \
		| grep -E 'lib\/lib' \
		| grep -E '\.so' | sort -u`; do
			# Normalize the link
			linkdest=`readlink $link | sed -e 's,\.\./\.\./lib/,,' -e 's,^/lib/,,'`
			linkdir=`dirname $link`
			# If the link is to another directory, leave it alone
			if [ `echo $linkdest | grep -E '/'` ]; then
				continue
			fi
			soname=`objdump -p $linkdir/$linkdest | grep SONAME | awk '{print $2}'`
			base=`basename $link`
			if [ -z "$soname" ]; then
				echo "MISSING SONAME $link"
				exit 1
			fi
			if [ "$base" == "$soname" ]; then
				rm $link
				cp $linkdir/$linkdest $link
			else
				rm $link
			fi
		done
		for lib in `find $pkgpath/lib -mindepth 1 -maxdepth 1 -type f \
		| grep -E 'lib\/lib' \
		| grep -E '\.so' |sort -u`; do
			soname=`objdump -p $lib | grep SONAME | awk '{print $2}'`
			base=`basename $lib`
			if [ -z "$soname" ]; then
				echo "MISSING SONAME $lib"
				exit 1
			fi
			if [ "$base" != "$soname" ]; then
				rm $lib
			fi
		done
	fi
}

remove_libs()
{
	if [ -e $pkgpath/lib ]; then
		find $pkgpath/lib -mindepth 1 -maxdepth 1 -name lib\*.so\* -delete
	fi
}

main()
{
	package_path
	extract_archive
	preserve_empty_working
	shallow_usr
	redirect_shared
	extra_dirs
	extra_files
	remove_empty
#	remove_libs
	reduce_libs
}

get_opts $@
main $@
exit 0
